{"version":3,"sources":["components/Show.js","services/retrieval.js","App.js","reportWebVitals.js","index.js"],"names":["Show","show","date","month","day","year","venueName","venue","name","setOne","sets","setTwo","setThree","encore","showNotes","length","map","song","index","href","title","note","id","transition","baseURL","retrieval","getShows","axios","method","url","then","response","data","catch","err","console","log","getSongs","getVenues","App","useState","songs","setSongs","shows","setShows","venues","setVenues","useEffect","a","Promise","all","returnedSongs","returnedShows","returnedVenues","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4daaa089.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Show = ({ show }) => {\r\n  const { month, day, year } = show.date;\r\n  const date = `${month}/${day}/${year}`;\r\n  const venueName = show.venue.name;\r\n\r\n  const setOne = show.sets[1];\r\n  const setTwo = show.sets[2];\r\n  const setThree = show.sets[3];\r\n  const encore = show.sets.encore;\r\n\r\n  const showNotes = show.showNotes;\r\n\r\n  return (\r\n    <div>\r\n      <h3>{date} - {venueName}</h3>\r\n\r\n      {/* {setID === 'encore' ? 'Encore: ' : `Set ${setID}: `}\r\n        {set.map((song, index) => (\r\n          <span key={song.title}>\r\n            <a key={song.title}\r\n            // href='#'\r\n            >\r\n              {song.title}\r\n            </a>\r\n            {song.note ? <sup>[{song.note.id}]</sup> : null}\r\n            {index === set.length - 1 ? null : (song.transition ? ' > ' : ', ')}\r\n          </span>\r\n        ))} */}\r\n\r\n      {setOne.length > 0\r\n        ? <p>Set One: {setOne.map((song, index) => (\r\n          <span key={song.title}>\r\n            <a key={song.title} href='#'>\r\n              {song.title}\r\n            </a>\r\n            {song.note ? <sup>[{song.note.id}]</sup> : null}\r\n            {index === setOne.length - 1 ? null : (song.transition ? ' > ' : ', ')}\r\n          </span>\r\n        ))}\r\n          </p>\r\n        : null}\r\n\r\n      {/* {setTwo.length > 0\r\n        ? <p>Set Two: {setTwo.map(song => song.title).join(', ')}</p>\r\n        : null} */}\r\n\r\n      {setTwo.length > 0\r\n        ? <p>Set Two: {setTwo.map((song, index) => (\r\n          <span key={song.title}>\r\n            <a key={song.title} href='#'>\r\n              {song.title}\r\n            </a>\r\n            {song.note ? <sup>[{song.note.id}]</sup> : null}\r\n            {index === setTwo.length - 1 ? null : (song.transition ? ' > ' : ', ')}\r\n          </span>\r\n        ))}\r\n          </p>\r\n        : null}\r\n\r\n      {/* {setThree.length > 0\r\n        ? <p>Set Three: {setThree.map(song => song.title).join(', ')}</p>\r\n        : null} */}\r\n\r\n      {setThree.length > 0\r\n        ? <p>Set Three: {setOne.map((song, index) => (\r\n          <span key={song.title}>\r\n            <a key={song.title} href='#'>\r\n              {song.title}\r\n            </a>\r\n            {song.note ? <sup>[{song.note.id}]</sup> : null}\r\n            {index === setOne.length - 1 ? null : (song.transition ? ' > ' : ', ')}\r\n          </span>\r\n        ))}\r\n          </p>\r\n        : null}\r\n\r\n      {/* {encore.length > 0\r\n        ? <p>Encore: {encore.map(song => song.title).join(', ')}</p>\r\n        : null} */}\r\n\r\n      {encore.length > 0\r\n        ? <p>Encore: {encore.map((song, index) => (\r\n          <span key={song.title}>\r\n            <a key={song.title} href='#'>\r\n              {song.title}\r\n            </a>\r\n            {song.note ? <sup>[{song.note.id}]</sup> : null}\r\n            {index === encore.length - 1 ? null : (song.transition ? ' > ' : ', ')}\r\n          </span>\r\n        ))}\r\n          </p>\r\n        : null}\r\n\r\n      {showNotes\r\n        ? <p>Notes: {showNotes}</p>\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Show;\r\n","import axios from 'axios';\r\nconst baseURL = '/api';\r\n\r\nconst getShows = () => (\r\n  axios({\r\n    method: 'get',\r\n    url: '/shows',\r\n    baseURL: baseURL\r\n  })\r\n    .then(response => response.data)\r\n    .catch(err => console.log(err))\r\n);\r\n\r\nconst getSongs = () => (\r\n  axios({\r\n    method: 'get',\r\n    url: '/songs',\r\n    baseURL: baseURL\r\n  })\r\n    .then(response => response.data)\r\n    .catch(err => console.log(err))\r\n);\r\n\r\nconst getVenues = () => (\r\n  axios({\r\n    method: 'get',\r\n    url: '/venues',\r\n    baseURL: baseURL\r\n  })\r\n    .then(response => response.data)\r\n    .catch(err => console.log(err))\r\n);\r\n\r\nconst retrieval = { getShows, getSongs, getVenues };\r\nexport default retrieval;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n// component imports\r\nimport Show from './components/Show';\r\n// import ShowForm from './components/ShowForm/ShowForm';\r\n\r\n// service imports\r\nimport retrieval from './services/retrieval';\r\n// import posting from './services/posting';\r\n\r\nconst App = () => {\r\n  const [songs, setSongs] = useState('');\r\n  const [shows, setShows] = useState('');\r\n  const [venues, setVenues] = useState('');\r\n\r\n  useEffect(async () => {\r\n    // retrieves all band-related data upon page load\r\n    const [returnedSongs, returnedShows, returnedVenues] = await Promise.all([\r\n      retrieval.getSongs(),\r\n      retrieval.getShows(),\r\n      retrieval.getVenues()\r\n    ]);\r\n\r\n    setSongs(returnedSongs);\r\n    setShows(returnedShows);\r\n    setVenues(returnedVenues);\r\n  },\r\n  []);\r\n\r\n  // \"handleNewShow\" function only necessary for ShowForm. Currently not user-facing\r\n  //\r\n  // const handleNewShow = (show) => {\r\n  //   posting\r\n  //     .addShow(show)\r\n  //     .then(returnedShow => {\r\n  //       console.log(returnedShow);\r\n  //       setShows(shows.concat(returnedShow));\r\n  //     });\r\n  // };\r\n\r\n  return (\r\n    <div className='App'>\r\n\r\n      {/*\r\n\r\n      \"ShowForm\" component not user-facing.\r\n\r\n      TO-DO: Use for admin users once accounts and auth are implemented.\r\n\r\n      <ShowForm\r\n        songs={songs}\r\n        venues={venues}\r\n        handleNewShow={handleNewShow}\r\n      />\r\n\r\n      */}\r\n\r\n      <h1>Songs played by Mr. Please: </h1>\r\n      {songs\r\n        ? <>\r\n          <ul>\r\n            {songs.map(song => (<li key={song.id}>{song.title}</li>))}\r\n          </ul>\r\n          </>\r\n        : null}\r\n\r\n      <h1>Shows performed by Mr. Please: </h1>\r\n      {shows\r\n        ? <>\r\n          {shows.map(show => (\r\n            <Show\r\n              key={show.id}\r\n              show={show}\r\n            />\r\n          ))}\r\n          </>\r\n        : null}\r\n\r\n      <h1>Venues played by Mr. Please: </h1>\r\n      {venues\r\n        ? <>\r\n          <ul>\r\n            {venues.map(venue => (<li key={venue.id}>{venue.name}</li>))}\r\n          </ul>\r\n          </>\r\n        : null}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}